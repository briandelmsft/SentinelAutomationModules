{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Get-ThreatIntel",
            "type": "String"
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "accessControl": {
                    "triggers": {
                        "allowedCallerIpAddresses": []
                    },
                    "actions": {
                        "allowedCallerIpAddresses": []
                    },
                    "contents": {
                        "allowedCallerIpAddresses": []
                    }
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "PlaybookVersion": {
                            "defaultValue": "0.1.0",
                            "type": "String"
                        },
                        "PlaybookInternalName": {
                            "defaultValue": "TIModule",
                            "type": "String"
                        },
                        "ProjectName": {
                            "defaultValue": "STAT",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "triage": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "AddIncidentComments": {
                                            "title": "Add comments to the incident",
                                            "type": "boolean"
                                        },
                                        "CheckDomains": {
                                            "title": "Check Domain TI",
                                            "type": "boolean"
                                        },
                                        "CheckFileHashes": {
                                            "title": "Check File Hash TI",
                                            "type": "boolean"
                                        },
                                        "CheckIPs": {
                                            "title": "Check IP TI",
                                            "type": "boolean"
                                        },
                                        "CheckURLs": {
                                            "title": "Check URL TI",
                                            "type": "boolean"
                                        },
                                        "Entities": {
                                            "description": "Click here and select the Body object from the Base-Module output in the Dynamic content menu",
                                            "title": "Base Module Body",
                                            "type": "array"
                                        },
                                        "LookbackInDays": {
                                            "description": "Enter the number of days you want to lookback in the Threat Intelligence data",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Compose_-_DetailedResults": {
                            "runAfter": {
                                "Condition_-_Domain": [
                                    "Succeeded"
                                ],
                                "Condition_-_File_Hash": [
                                    "Succeeded"
                                ],
                                "Condition_-_IP": [
                                    "Succeeded"
                                ],
                                "Condition_-_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@union(coalesce(body('Select_-_File_Hash'),variables('emptyArray')),coalesce(body('Select_-_IP'),variables('emptyArray')),coalesce(body('Select_-_URL'),variables('emptyArray')),coalesce(body('Select_-_Domain'),variables('emptyArray')))"
                        },
                        "Condition": {
                            "actions": {
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Create_HTML_table": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@body('Parse_JSON')?['IncidentARMId']",
                                            "message": "<p>A total of @{length(outputs('Compose_-_DetailedResults'))} matching TI indicators were found.<br>\n<br>\n@{body('Create_HTML_table')}<br>\n@{if(equals(body('Parse_JSON')?['ModuleVersions']?['TIModule'], null), '', if(not(equals(body('Parse_JSON')?['ModuleVersions']?['TIModule'], parameters('PlaybookVersion'))), concat('<br>Sentinel Triage AssistanT - Threat Intel Update Available: Installed Version: ', parameters('PlaybookVersion'), ', Available Version: ', body('Parse_JSON')?['ModuleVersions']?['TIModule']), ''))}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Create_HTML_table": {
                                    "runAfter": {},
                                    "type": "Table",
                                    "inputs": {
                                        "format": "HTML",
                                        "from": "@outputs('Compose_-_DetailedResults')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Compose_-_DetailedResults": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['AddIncidentComments']",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_-_Domain": {
                            "actions": {
                                "Compose_-_Domain": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "let domains = '@{replace(string(body('Parse_JSON')?['Domains']), '''', '\\''')}';\nlet domainEntities = datatable(temp:string)['']\n| extend Entities = parse_json(domains)\n| mv-expand todynamic(Entities)\n| project DomainName = tolower(tostring(Entities.RawEntity.domainName));\ndomainEntities\n| join kind=inner (ThreatIntelligenceIndicator\n| where isnotempty(DomainName)\n| summarize arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| extend DomainName = tolower(DomainName)) on DomainName\n| project TIData=DomainName, SourceSystem, Description, ThreatType, ConfidenceScore, IndicatorId"
                                },
                                "HTTP_-_Domain": {
                                    "runAfter": {
                                        "Compose_-_Domain": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://api.loganalytics.io",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "query": "@{outputs('Compose_-_Domain')}",
                                            "timespan": "P@{variables('Lookback')}D"
                                        },
                                        "method": "POST",
                                        "uri": "https://api.loganalytics.io/v1/workspaces/@{body('Parse_JSON')?['WorkspaceId']}/query"
                                    }
                                },
                                "Response_-_Domain_API_Failure": {
                                    "runAfter": {
                                        "HTTP_-_Domain": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{outputs('HTTP_-_Domain')['statusCode']}",
                                            "PlaybookName": "@{workflow()?['name']}",
                                            "PlaybookResourceId": "@{workflow()?['id']}",
                                            "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                            "PlaybookVersion": "@parameters('PlaybookVersion')",
                                            "SourceError": "@body('HTTP_-_Domain')"
                                        },
                                        "statusCode": "@outputs('HTTP_-_Domain')['statusCode']"
                                    }
                                },
                                "Select_-_Domain": {
                                    "runAfter": {
                                        "HTTP_-_Domain": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('HTTP_-_Domain')['tables'][0]['rows']",
                                        "select": {
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[0]?['name']}": "@item()?[0]",
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[1]?['name']}": "@item()?[1]",
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[2]?['name']}": "@item()?[2]",
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[3]?['name']}": "@item()?[3]",
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[4]?['name']}": "@item()?[4]",
                                            "@{body('HTTP_-_Domain')['tables'][0]['columns']?[5]?['name']}": "@item()?[5]",
                                            "TIType": "Domain"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['CheckDomains']",
                                            true
                                        ]
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Parse_JSON')?['Domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_-_File_Hash": {
                            "actions": {
                                "Compose_-_File_Hash": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "let hashes = '@{replace(string(body('Parse_JSON')?['FileHashes']), '''', '\\''')}';\nlet hashEntities = datatable(temp:string)['']\n| extend Entities = parse_json(hashes)\n| mv-expand todynamic(Entities)\n| project FileHashValue = tolower(tostring(Entities.RawEntity.hashValue)), Algorithm = tostring(Entities.RawEntity.algorithm);\nhashEntities\n| join kind=inner (ThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| summarize arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| extend FileHashValue = tolower(FileHashValue)) on FileHashValue\n| project TIData=FileHashValue, SourceSystem, Description, ThreatType, ConfidenceScore, IndicatorId"
                                },
                                "HTTP_-_File_Hash": {
                                    "runAfter": {
                                        "Compose_-_File_Hash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://api.loganalytics.io",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "query": "@{outputs('Compose_-_File_Hash')}",
                                            "timespan": "P@{variables('Lookback')}D"
                                        },
                                        "method": "POST",
                                        "uri": "https://api.loganalytics.io/v1/workspaces/@{body('Parse_JSON')?['WorkspaceId']}/query"
                                    }
                                },
                                "Response_-_FIleHash_API_Failure": {
                                    "runAfter": {
                                        "HTTP_-_File_Hash": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "Error": "@{parameters('PlaybookInternalName')} module failed to execute with status @{outputs('HTTP_-_File_Hash')['statusCode']}",
                                            "PlaybookName": "@{workflow()?['name']}",
                                            "PlaybookResourceId": "@{workflow()?['id']}",
                                            "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                            "PlaybookVersion": "@parameters('PlaybookVersion')",
                                            "SourceError": "@body('HTTP_-_File_Hash')"
                                        },
                                        "statusCode": "@outputs('HTTP_-_File_Hash')['statusCode']"
                                    }
                                },
                                "Select_-_File_Hash": {
                                    "runAfter": {
                                        "HTTP_-_File_Hash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('HTTP_-_File_Hash')['tables'][0]['rows']",
                                        "select": {
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[0]?['name']}": "@item()?[0]",
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[1]?['name']}": "@item()?[1]",
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[2]?['name']}": "@item()?[2]",
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[3]?['name']}": "@item()?[3]",
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[4]?['name']}": "@item()?[4]",
                                            "@{body('HTTP_-_File_Hash')['tables'][0]['columns']?[5]?['name']}": "@item()?[5]",
                                            "TIType": "FileHash"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['CheckFileHashes']",
                                            true
                                        ]
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Parse_JSON')?['FileHashes'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_-_IP": {
                            "actions": {
                                "Compose_-_IP": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "let ipData = '@{replace(string(body('Parse_JSON')?['IPs']), '''', '\\''')}';\nlet ipEntities = datatable(temp:string)['']\n| extend Entities = parse_json(ipData)\n| mv-expand todynamic(Entities)\n| project IPAddress = tostring(Entities.Address), Latitude = todecimal(Entities.GeoData.latitude), Longitude = todecimal(Entities.GeoData.longitude), Country=tostring(Entities.GeoData.country), State=tostring(Entities.GeoData.state);\nipEntities\n| join kind=inner (ThreatIntelligenceIndicator\n| summarize arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| extend tiIP = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress)) on $left.IPAddress == $right.tiIP\n| project TIData=IPAddress, SourceSystem, Description, ThreatType, ConfidenceScore, IndicatorId"
                                },
                                "HTTP_-_IP": {
                                    "runAfter": {
                                        "Compose_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://api.loganalytics.io",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "query": "@{outputs('Compose_-_IP')}",
                                            "timespan": "P@{variables('Lookback')}D"
                                        },
                                        "method": "POST",
                                        "uri": "https://api.loganalytics.io/v1/workspaces/@{body('Parse_JSON')?['WorkspaceId']}/query"
                                    }
                                },
                                "Response_-_IP_API_Failure": {
                                    "runAfter": {
                                        "HTTP_-_IP": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{outputs('HTTP_-_IP')['statusCode']}",
                                            "PlaybookName": "@{workflow()?['name']}",
                                            "PlaybookResourceId": "@{workflow()?['id']}",
                                            "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                            "PlaybookVersion": "@parameters('PlaybookVersion')",
                                            "SourceError": "@body('HTTP_-_IP')"
                                        },
                                        "statusCode": "@outputs('HTTP_-_IP')['statusCode']"
                                    }
                                },
                                "Select_-_IP": {
                                    "runAfter": {
                                        "HTTP_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('HTTP_-_IP')['tables'][0]['rows']",
                                        "select": {
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[0]?['name']}": "@item()?[0]",
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[1]?['name']}": "@item()?[1]",
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[2]?['name']}": "@item()?[2]",
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[3]?['name']}": "@item()?[3]",
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[4]?['name']}": "@item()?[4]",
                                            "@{body('HTTP_-_IP')['tables'][0]['columns']?[5]?['name']}": "@item()?[5]",
                                            "TIType": "IP"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['CheckIPs']",
                                            true
                                        ]
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Parse_JSON')?['IPs'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_-_URL": {
                            "actions": {
                                "Compose_-_URL": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "let urls = '@{replace(string(body('Parse_JSON')?['URLs']), '''', '\\''')}';\nlet urlEntities = datatable(temp:string)['']\n| extend Entities = parse_json(urls)\n| mv-expand todynamic(Entities)\n| project Url = tolower(tostring(Entities.RawEntity.url));\nurlEntities\n| join kind=inner (ThreatIntelligenceIndicator\n| where isnotempty(Url)\n| summarize arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true\n| extend Url = tolower(Url)) on Url\n| project TIData=Url, SourceSystem, Description, ThreatType, ConfidenceScore, IndicatorId"
                                },
                                "HTTP_-_URL": {
                                    "runAfter": {
                                        "Compose_-_URL": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://api.loganalytics.io",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "query": "@{outputs('Compose_-_URL')}",
                                            "timespan": "P@{variables('Lookback')}D"
                                        },
                                        "method": "POST",
                                        "uri": "https://api.loganalytics.io/v1/workspaces/@{body('Parse_JSON')?['WorkspaceId']}/query"
                                    }
                                },
                                "Response_-_URL_API_Failed": {
                                    "runAfter": {
                                        "HTTP_-_URL": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{outputs('HTTP_-_URL')['statusCode']}",
                                            "PlaybookName": "@{workflow()?['name']}",
                                            "PlaybookResourceId": "@{workflow()?['id']}",
                                            "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                            "PlaybookVersion": "@parameters('PlaybookVersion')",
                                            "SourceError": "@body('HTTP_-_URL')"
                                        },
                                        "statusCode": "@outputs('HTTP_-_URL')['statusCode']"
                                    }
                                },
                                "Select_-_URL": {
                                    "runAfter": {
                                        "HTTP_-_URL": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('HTTP_-_URL')['tables'][0]['rows']",
                                        "select": {
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[0]?['name']}": "@item()?[0]",
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[1]?['name']}": "@item()?[1]",
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[2]?['name']}": "@item()?[2]",
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[3]?['name']}": "@item()?[3]",
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[4]?['name']}": "@item()?[4]",
                                            "@{body('HTTP_-_URL')['tables'][0]['columns']?[5]?['name']}": "@item()?[5]",
                                            "TIType": "URL"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['CheckURLs']",
                                            true
                                        ]
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Parse_JSON')?['URLs'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Initialize_variable_-_Lookback": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "emptyArray",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Lookback": {
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Lookback",
                                        "type": "string",
                                        "value": "@{coalesce(triggerBody()?['LookbackInDays'], '14')}"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {},
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['Entities']",
                                "schema": {
                                    "properties": {
                                        "Accounts": {
                                            "description": "Array of User Accounts",
                                            "items": {
                                                "properties": {
                                                    "AssignedRoles": {
                                                        "description": "Array of assigned roles in Accounts array",
                                                        "items": {
                                                            "properties": {
                                                                "Role": {
                                                                    "description": "Array property in AssignedRoles array"
                                                                }
                                                            },
                                                            "required": [],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Accounts array",
                                                        "properties": {
                                                            "accountName": {
                                                                "description": "accountName from RawEntity object in Accounts array"
                                                            },
                                                            "displayName": {
                                                                "description": "dislayName from RawEntity object in Accounts array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Accounts array"
                                                            },
                                                            "isDomainJoined": {
                                                                "description": "isDomainJoined from RawEntity object in Accounts array"
                                                            },
                                                            "sid": {
                                                                "description": "sid from RawEntity object in Accounts array"
                                                            },
                                                            "upnSuffix": {
                                                                "description": "upnSuffix from RawEntity object in Accounts array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "accountEnabled": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "city": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "country": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "department": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "id": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "jobTitle": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "mail": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "manager": {
                                                        "description": "Array property in Accounts array",
                                                        "properties": {
                                                            "@@odata.type": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "id": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "mail": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "userPrincipalName": {
                                                                "description": "Array property in Accounts array manager object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "officeLocation": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesDistinguishedName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesDomainName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSamAccountName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSecurityIdentifier": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSyncEnabled": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "state": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "userPrincipalName": {
                                                        "description": "Array property in Accounts array"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "AccountsCount": {
                                            "description": "Count of accounts processed by module",
                                            "type": "integer"
                                        },
                                        "Domains": {
                                            "description": "Array of Domains",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Domains array",
                                                        "properties": {
                                                            "domainName": {
                                                                "description": "domainName from RawEntity object in Domains array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Domains array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "DomainsCount": {
                                            "description": "Count of Domains processed by module",
                                            "type": "integer"
                                        },
                                        "EntitiesCount": {
                                            "description": "Count of all entities processed by enrichment module",
                                            "type": "integer"
                                        },
                                        "FileHashes": {
                                            "description": "Array of FileHashes",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in FileHashes array",
                                                        "properties": {
                                                            "algorithm": {
                                                                "description": "algorithm from RawEntity object in FileHashes array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in FileHashes array"
                                                            },
                                                            "hashValue": {
                                                                "description": "hashValue from RawEntity object in FileHashes array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "FileHashesCount": {
                                            "description": "Count of File Hashes processed by module",
                                            "type": "integer"
                                        },
                                        "Files": {
                                            "description": "Array of Files",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Files array",
                                                        "properties": {
                                                            "directory": {
                                                                "description": "directory from RawEntity object in Files array"
                                                            },
                                                            "fileName": {
                                                                "description": "fileName from RawEntity object in Files array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Files array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "FilesCount": {
                                            "description": "Count of Files processed by module",
                                            "type": "integer"
                                        },
                                        "Hosts": {
                                            "description": "Array of Hosts",
                                            "items": {
                                                "properties": {
                                                    "DnsDomain": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "FQDN": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "Hostname": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Hosts array",
                                                        "properties": {
                                                            "dnsDomain": {
                                                                "description": "dnsDomain from RawEntity object in Hosts array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Hosts array"
                                                            },
                                                            "hostName": {
                                                                "description": "hostName from RawEntity object in Hosts array"
                                                            },
                                                            "netBiosName": {
                                                                "description": "netBiosName from RawEntity object in Hosts array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "HostsCount": {
                                            "description": "Count of Hosts processed by module",
                                            "type": "integer"
                                        },
                                        "IPs": {
                                            "description": "Array of IP Addresses",
                                            "items": {
                                                "properties": {
                                                    "Address": {
                                                        "description": "Array property in IPs array"
                                                    },
                                                    "GeoData": {
                                                        "description": "Array object in IPs array",
                                                        "properties": {
                                                            "asn": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "carrier": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "city": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "cityCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "continent": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "country": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "countryCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "ipAddr": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "ipRoutingType": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "latitude": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "longitude": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "organization": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "organizationType": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "region": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "state": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "stateCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "stateCode": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in IPs array",
                                                        "properties": {
                                                            "address": {
                                                                "description": "address from RawEntity object in IPs array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in IPs array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "IPsCount": {
                                            "description": "Count of IPs processed by module",
                                            "type": "integer"
                                        },
                                        "IncidentARMId": {
                                            "description": "The ARM Id of the Azure Sentinel Incident",
                                            "type": "string"
                                        },
                                        "ModuleVersions": {
                                            "properties": {
                                                "AADRisksModule": {
                                                    "type": "string"
                                                },
                                                "BaseModule": {
                                                    "type": "string"
                                                },
                                                "FileModule": {
                                                    "type": "string"
                                                },
                                                "KQLModule": {
                                                    "type": "string"
                                                },
                                                "MCASModule": {
                                                    "type": "string"
                                                },
                                                "MDEModule": {
                                                    "type": "string"
                                                },
                                                "OOFModule": {
                                                    "type": "string"
                                                },
                                                "RelatedAlerts": {
                                                    "type": "string"
                                                },
                                                "TIModule": {
                                                    "type": "string"
                                                },
                                                "UEBAModule": {
                                                    "type": "string"
                                                },
                                                "WatchlistModule": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "URLs": {
                                            "description": "Array of URLs",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in URLs array",
                                                        "properties": {
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in URLs array"
                                                            },
                                                            "url": {
                                                                "description": "url from RawEntity object in URLs array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "URLsCount": {
                                            "description": "Count of URLs processed by module",
                                            "type": "integer"
                                        },
                                        "WorkspaceId": {
                                            "description": "The Log Analytics Workspace Id of the Azure Sentinel Incident",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Response": {
                            "runAfter": {
                                "Condition": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "AnyTIFound": "@greater(add(add(length(coalesce(body('Select_-_Domain'), variables('emptyArray'))),length(coalesce(body('Select_-_File_Hash'), variables('emptyArray')))),add(length(coalesce(body('Select_-_IP'), variables('emptyArray'))),length(coalesce(body('Select_-_URL'), variables('emptyArray'))))),0)",
                                    "DetailedResults": "@outputs('Compose_-_DetailedResults')",
                                    "DomainEntitiesCount": "@body('Parse_JSON')?['DomainsCount']",
                                    "DomainEntitiesWithTI": "@length(coalesce(body('Select_-_Domain'), variables('emptyArray')))",
                                    "DomainTIFound": "@greater(length(coalesce(body('Select_-_Domain'), variables('emptyArray'))),0)",
                                    "FileHashEntitiesCount": "@body('Parse_JSON')?['FileHashesCount']",
                                    "FileHashEntitiesWithTI": "@length(coalesce(body('Select_-_File_Hash'), variables('emptyArray')))",
                                    "FileHashTIFound": "@greater(length(coalesce(body('Select_-_File_Hash'), variables('emptyArray'))),0)",
                                    "IPEntitiesCount": "@body('Parse_JSON')?['IPsCount']",
                                    "IPEntitiesWithTI": "@length(coalesce(body('Select_-_IP'), variables('emptyArray')))",
                                    "IPTIFound": "@greater(length(coalesce(body('Select_-_IP'), variables('emptyArray'))),0)",
                                    "URLEntitiesCount": "@body('Parse_JSON')?['URLsCount']",
                                    "URLEntitiesWithTI": "@length(coalesce(body('Select_-_URL'), variables('emptyArray')))",
                                    "URLTIFound": "@greater(length(coalesce(body('Select_-_URL'), variables('emptyArray'))),0)"
                                },
                                "statusCode": 200
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "resourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]"
        }
    }
}